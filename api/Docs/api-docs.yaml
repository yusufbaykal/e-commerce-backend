openapi: 3.0.0
info:
  title: E-Commerce API
  description: REST API documentation for E-Commerce application
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User management operations
  - name: Products
    description: Product management operations
  - name: Cart
    description: Shopping cart operations
  - name: Orders
    description: Order management operations
  - name: Categories
    description: Category management operations
  - name: Statistics
    description: Statistical data operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Error message
        error:
          type: string
          example: Detailed error description

    SuccessResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Operation successful
        data:
          type: object

    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
        description:
          type: string
        category:
          type: string
        category_id:
          type: string
        image:
          type: string
        stock:
          type: integer
        is_active:
          type: boolean
        seller_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        shipping_address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
            country:
              type: string
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
              quantity:
                type: integer
              price:
                type: number
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        order_id:
          type: string
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
          enum: [pending, completed, failed, refunded]
        payment_method:
          type: string
          enum: [credit_card, debit_card, bank_transfer, digital_wallet]
        transaction_id:
          type: string
        refund:
          type: object
          properties:
            status:
              type: string
              enum: [none, pending, completed, failed]
            refund_amount:
              type: number
            refund_date:
              type: string
              format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SellerStatistics:
      type: object
      properties:
        total_sales:
          type: number
        total_orders:
          type: integer
        average_order_value:
          type: number
        total_products:
          type: integer
        period:
          type: string
          example: "last_30_days"

    ProductPerformance:
      type: object
      properties:
        top_selling_products:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
              name:
                type: string
              total_sales:
                type: number
              units_sold:
                type: integer
        product_categories_performance:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
              total_sales:
                type: number
              products_count:
                type: integer

    DailyMetrics:
      type: object
      properties:
        date:
          type: string
          format: date
        sales:
          type: number
        orders:
          type: integer
        average_order_value:
          type: number
        active_products:
          type: integer
        conversion_rate:
          type: number
          format: float

paths:
  /api/users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - surname
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
                name:
                  type: string
                  description: User's first name
                surname:
                  type: string
                  description: User's last name
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
        '500':
          description: Server error

  /api/users/login:
    get:
      summary: User login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: JWT access token
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                          email:
                            type: string
                          name:
                            type: string
                          surname:
                            type: string
        '400':
          description: Invalid credentials
        '404':
          description: User not found
        '500':
          description: Server error

  /api/product/create:
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - category
                - category_id
                - stock
                - seller_id
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  description: Product price
                description:
                  type: string
                  description: Product description
                category:
                  type: string
                  description: Product category name
                category_id:
                  type: string
                  description: Category ID
                stock:
                  type: integer
                  description: Product stock quantity
                seller_id:
                  type: string
                  description: Seller's ID
                image:
                  type: string
                  format: binary
                  description: Product image file
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Created Product Successfully
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/carts/get:
    get:
      summary: Get user's cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  description: User's ID
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Cart Retrieved Successfully
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            product_id:
                              type: string
                            quantity:
                              type: integer
                            total_price:
                              type: number
        '404':
          description: Cart not found
        '500':
          description: Server error

  /api/seller/{sellerId}/products:
    get:
      summary: Get all products for a seller
      tags:
        - Sellers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sellerId
          required: true
          schema:
            type: string
          description: Seller's ID
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: All Products for Seller
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          description: Invalid seller ID format
        '401':
          description: Unauthorized
        '404':
          description: No products found
        '500':
          description: Server error

  /api/seller/{sellerId}/orders:
    get:
      summary: Get all orders for a seller
      tags:
        - Sellers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sellerId
          required: true
          schema:
            type: string
          description: Seller's ID
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: All Orders for Seller
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '400':
          description: Invalid seller ID format
        '401':
          description: Unauthorized
        '404':
          description: No orders found
        '500':
          description: Server error

  /api/seller/{sellerId}/statistics:
    get:
      summary: Get seller statistics
      tags:
        - Sellers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sellerId
          required: true
          schema:
            type: string
          description: Seller's ID
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SellerStatistics'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/seller/{sellerId}/performance:
    get:
      summary: Get seller's product performance metrics
      tags:
        - Sellers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sellerId
          required: true
          schema:
            type: string
          description: Seller's ID
      responses:
        '200':
          description: Performance metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductPerformance'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/seller/{sellerId}/daily-metrics:
    get:
      summary: Get seller's daily performance metrics
      tags:
        - Sellers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sellerId
          required: true
          schema:
            type: string
          description: Seller's ID
      responses:
        '200':
          description: Daily metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DailyMetrics'
        '401':
          description: Unauthorized
        '500':
          description: Server error 